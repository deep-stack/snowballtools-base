{"version":3,"sources":["../src/client.ts","../src/queries.ts","../src/mutations.ts","../src/types.ts"],"sourcesContent":["import { ApolloClient, DefaultOptions, InMemoryCache, NormalizedCacheObject } from '@apollo/client';\n\nimport * as queries from './queries';\nimport * as types from './types';\nimport * as mutations from './mutations';\n\nexport interface GraphQLConfig {\n  gqlEndpoint: string;\n}\n\n// TODO: check options\nconst defaultOptions: DefaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'ignore'\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all'\n  }\n};\n\nexport class GQLClient {\n  private client: ApolloClient<NormalizedCacheObject>;\n\n  constructor (config: GraphQLConfig) {\n    this.client = new ApolloClient({\n      uri: config.gqlEndpoint,\n      cache: new InMemoryCache(),\n      defaultOptions,\n      credentials: 'include'\n    });\n  }\n\n  async getUser () : Promise<types.GetUserResponse> {\n    const { data } = await this.client.query({\n      query: queries.getUser\n    });\n\n    return data;\n  }\n\n  async getProject (projectId: string) : Promise<types.GetProjectResponse> {\n    const { data } = await this.client.query({\n      query: queries.getProject,\n      variables: {\n        projectId\n      }\n    });\n\n    return data;\n  }\n\n  async getProjectsInOrganization (organizationSlug: string) : Promise<types.GetProjectsInOrganizationResponse> {\n    const { data } = await this.client.query({\n      query: queries.getProjectsInOrganization,\n      variables: {\n        organizationSlug\n      }\n    });\n\n    return data;\n  }\n\n  async getOrganizations () : Promise<types.GetOrganizationsResponse> {\n    const { data } = await this.client.query({\n      query: queries.getOrganizations\n    });\n\n    return data;\n  }\n\n  async getDeployments (projectId: string) : Promise<types.GetDeploymentsResponse> {\n    const { data } = await this.client.query({\n      query: queries.getDeployments,\n      variables: {\n        projectId\n      }\n    });\n\n    return data;\n  }\n\n  async getEnvironmentVariables (projectId: string) : Promise<types.GetEnvironmentVariablesResponse> {\n    const { data } = await this.client.query({\n      query: queries.getEnvironmentVariables,\n      variables: {\n        projectId\n      }\n    });\n\n    return data;\n  }\n\n  async getProjectMembers (projectId: string) : Promise<types.GetProjectMembersResponse> {\n    const result = await this.client.query({\n      query: queries.getProjectMembers,\n      variables: {\n        projectId\n      }\n    });\n\n    return result.data;\n  }\n\n  async addProjectMember (projectId: string, data: types.AddProjectMemberInput) : Promise<types.AddProjectMemberResponse> {\n    const result = await this.client.mutate({\n      mutation: mutations.addProjectMember,\n      variables: {\n        projectId,\n        data\n      }\n    });\n\n    return result.data;\n  }\n\n  async updateProjectMember (projectMemberId: string, data: types.UpdateProjectMemberInput): Promise<types.UpdateProjectMemberResponse> {\n    const result = await this.client.mutate({\n      mutation: mutations.updateProjectMember,\n      variables: {\n        projectMemberId,\n        data\n      }\n    });\n\n    return result.data;\n  }\n\n  async removeProjectMember (projectMemberId: string): Promise<types.RemoveProjectMemberResponse> {\n    const result = await this.client.mutate({\n      mutation: mutations.removeProjectMember,\n      variables: {\n        projectMemberId\n      }\n    });\n\n    return result.data;\n  }\n\n  async searchProjects (searchText: string) : Promise<types.SearchProjectsResponse> {\n    const { data } = await this.client.query({\n      query: queries.searchProjects,\n      variables: {\n        searchText\n      }\n    });\n\n    return data;\n  }\n\n  async addEnvironmentVariables (projectId: string, data: types.AddEnvironmentVariableInput[]): Promise<types.AddEnvironmentVariablesResponse> {\n    const result = await this.client.mutate({\n      mutation: mutations.addEnvironmentVariables,\n      variables: {\n        projectId,\n        data\n      }\n    });\n\n    return result.data;\n  }\n\n  async updateEnvironmentVariable (environmentVariableId: string, data: types.UpdateEnvironmentVariableInput): Promise<types.UpdateEnvironmentVariableResponse> {\n    const result = await this.client.mutate({\n      mutation: mutations.updateEnvironmentVariable,\n      variables: {\n        environmentVariableId,\n        data\n      }\n    });\n\n    return result.data;\n  }\n\n  async removeEnvironmentVariable (environmentVariableId: string): Promise<types.RemoveEnvironmentVariableResponse> {\n    const { data } = await this.client.mutate({\n      mutation: mutations.removeEnvironmentVariable,\n      variables: {\n        environmentVariableId\n      }\n    });\n\n    return data;\n  }\n\n  async updateDeploymentToProd (deploymentId: string): Promise<types.UpdateDeploymentToProdResponse> {\n    const { data } = await this.client.mutate({\n      mutation: mutations.updateDeploymentToProd,\n      variables: {\n        deploymentId\n      }\n    });\n\n    return data;\n  }\n\n  async addProject (organizationSlug: string, data: types.AddProjectInput): Promise<types.AddProjectResponse> {\n    const result = await this.client.mutate({\n      mutation: mutations.addProject,\n      variables: {\n        organizationSlug,\n        data\n      }\n    });\n\n    return result.data;\n  }\n\n  async updateProject (projectId: string, data: types.UpdateProjectInput): Promise<types.UpdateProjectResponse> {\n    const result = await this.client.mutate({\n      mutation: mutations.updateProjectMutation,\n      variables: {\n        projectId,\n        data\n      }\n    });\n\n    return result.data;\n  }\n\n  async updateDomain (domainId: string, data: types.UpdateDomainInput): Promise<types.UpdateDomainResponse> {\n    const result = await this.client.mutate({\n      mutation: mutations.updateDomainMutation,\n      variables: {\n        domainId,\n        data\n      }\n    });\n\n    return result.data;\n  }\n\n  async redeployToProd (deploymentId: string): Promise<types.RedeployToProdResponse> {\n    const { data } = await this.client.mutate({\n      mutation: mutations.redeployToProd,\n      variables: {\n        deploymentId\n      }\n    });\n\n    return data;\n  }\n\n  async deleteProject (projectId: string): Promise<types.DeleteProjectResponse> {\n    const { data } = await this.client.mutate({\n      mutation: mutations.deleteProject,\n      variables: {\n        projectId\n      }\n    });\n\n    return data;\n  }\n\n  async deleteDomain (domainId: string): Promise<types.DeleteDomainResponse> {\n    const { data } = await this.client.mutate({\n      mutation: mutations.deleteDomain,\n      variables: {\n        domainId\n      }\n    });\n\n    return data;\n  }\n\n  async rollbackDeployment (projectId: string, deploymentId: string): Promise<types.RollbackDeploymentResponse> {\n    const { data } = await this.client.mutate({\n      mutation: mutations.rollbackDeployment,\n      variables: {\n        projectId,\n        deploymentId\n      }\n    });\n\n    return data;\n  }\n\n  async deleteDeployment (deploymentId: string): Promise<types.DeleteDeploymentResponse> {\n    const { data } = await this.client.mutate({\n      mutation: mutations.deleteDeployment,\n      variables: {\n        deploymentId\n      }\n    });\n\n    return data;\n  }\n\n  async addDomain (projectId: string, data: types.AddDomainInput): Promise<types.AddDomainResponse> {\n    const result = await this.client.mutate({\n      mutation: mutations.addDomain,\n      variables: {\n        projectId,\n        data\n      }\n    });\n\n    return result.data;\n  }\n\n  async getDomains (projectId: string, filter?: types.FilterDomainInput): Promise<types.GetDomainsResponse> {\n    const { data } = await this.client.query({\n      query: queries.getDomains,\n      variables: {\n        projectId,\n        filter\n      }\n    });\n\n    return data;\n  }\n\n  async authenticateGitHub (code: string): Promise<types.AuthenticateGitHubResponse> {\n    const { data } = await this.client.mutate({\n      mutation: mutations.authenticateGitHub,\n      variables: {\n        code\n      }\n    });\n\n    return data;\n  }\n\n  async unauthenticateGithub (): Promise<types.UnauthenticateGitHubResponse> {\n    const { data } = await this.client.mutate({\n      mutation: mutations.unauthenticateGitHub\n    });\n\n    return data;\n  }\n}\n","import { gql } from '@apollo/client';\n\nexport const getUser = gql`\nquery {\n  user {\n    id\n    name\n    email\n    createdAt\n    updatedAt\n    gitHubToken\n  }\n}\n`;\n\nexport const getProject = gql`\nquery ($projectId: String!) {\n  project(projectId: $projectId) {\n    createdAt\n    description\n    id\n    name\n    template\n    updatedAt\n    prodBranch\n    framework\n    repository\n    webhooks\n    icon\n    subDomain\n    organization {\n      id\n      name\n    }\n    owner {\n      id\n      name\n      email\n    }\n    deployments {\n      id\n      branch\n      isCurrent\n      status\n      updatedAt\n      commitHash\n      createdAt\n      environment\n      domain {\n        status\n        branch\n        createdAt\n        updatedAt\n        id\n        name\n      }\n      createdBy {\n        id\n        name\n      }\n    }\n  }\n}\n`;\n\nexport const getProjectsInOrganization = gql`\nquery ($organizationSlug: String!) {\n  projectsInOrganization(organizationSlug: $organizationSlug) {\n    id\n    name\n    createdAt\n    description\n    framework\n    prodBranch\n    webhooks\n    repository\n    updatedAt\n    icon\n    subDomain\n    deployments {\n      id\n      branch\n      isCurrent\n      status\n      updatedAt\n      commitHash\n      commitMessage\n      createdAt\n      environment\n      domain {\n        status\n        branch\n        createdAt\n        updatedAt\n        id\n        name\n      }\n    }\n  }\n}\n`;\n\nexport const getOrganizations = gql`\nquery {\n  organizations {\n    id\n    name\n    slug\n    createdAt\n    updatedAt\n  }\n}\n`;\n\nexport const getDeployments = gql`\nquery ($projectId: String!)  {\n  deployments(projectId: $projectId) {\n    id\n    domain{\n      branch\n      createdAt\n      id\n      name\n      status\n      updatedAt\n    }\n    branch\n    commitHash\n    commitMessage\n    url\n    environment\n    isCurrent\n    status\n    createdAt\n    updatedAt\n    createdBy {\n      id\n      name\n      email\n    }\n  }\n}\n`;\n\nexport const getEnvironmentVariables = gql`\nquery ($projectId: String!)  {\n  environmentVariables(projectId: $projectId) {\n    createdAt\n    environment\n    id\n    key\n    updatedAt\n    value\n  }\n}\n`;\n\nexport const getProjectMembers = gql`\nquery ($projectId: String!) {\n  projectMembers(projectId: $projectId) {\n    id\n    member {\n      id\n      name\n      email\n      isVerified\n    }\n    isPending\n    createdAt\n    updatedAt\n    permissions\n  }\n}\n`;\n\nexport const searchProjects = gql`\nquery ($searchText: String!) {\n  searchProjects(searchText: $searchText) {\n    id\n    name\n    prodBranch\n    repository\n    createdAt\n    description\n    framework\n    prodBranch\n    webhooks\n    updatedAt\n    template\n    repository\n    organization {\n      id\n      name\n      slug\n      createdAt\n      updatedAt\n    }\n  }\n}\n`;\n\nexport const getDomains = gql`\nquery ($projectId: String!, $filter: FilterDomainsInput) {\n  domains(projectId: $projectId, filter: $filter) {\n    branch\n    createdAt\n    redirectTo {\n      id\n      name\n      branch\n      status\n    }\n    id\n    name\n    status\n    updatedAt\n  }\n}\n`;\n","import { gql } from '@apollo/client';\n\nexport const removeProjectMember = gql`\nmutation ($projectMemberId: String!) {\n  removeProjectMember(projectMemberId: $projectMemberId)\n}\n`;\n\nexport const updateProjectMember = gql`\nmutation ($projectMemberId: String!, $data: UpdateProjectMemberInput) {\n  updateProjectMember(projectMemberId: $projectMemberId, data: $data)\n}\n`;\n\nexport const addProjectMember = gql`\nmutation ($projectId: String!, $data: AddProjectMemberInput) {\n  addProjectMember(projectId: $projectId, data: $data)\n}\n`;\n\nexport const addEnvironmentVariables = gql`\nmutation ($projectId: String!, $data: [AddEnvironmentVariableInput!]) {\n  addEnvironmentVariables(projectId: $projectId, data: $data)\n}\n`;\n\nexport const updateEnvironmentVariable = gql`\nmutation ($environmentVariableId: String!, $data: UpdateEnvironmentVariableInput!) {\n  updateEnvironmentVariable(environmentVariableId: $environmentVariableId, data: $data)\n}\n`;\n\nexport const removeEnvironmentVariable = gql`\nmutation ($environmentVariableId: String!) {\n  removeEnvironmentVariable(environmentVariableId: $environmentVariableId)\n}\n`;\n\nexport const updateDeploymentToProd = gql`\nmutation ($deploymentId: String!) {\n  updateDeploymentToProd(deploymentId: $deploymentId)\n}\n`;\n\nexport const addProject = gql`\nmutation ($organizationSlug: String!, $data: AddProjectInput) {\n  addProject(organizationSlug: $organizationSlug, data: $data) {\n    id\n  }\n}`;\n\nexport const updateProjectMutation = gql`\nmutation ($projectId: String!, $data: UpdateProjectInput) {\n  updateProject(projectId: $projectId, data: $data)\n}`;\n\nexport const updateDomainMutation = gql`\nmutation ($domainId: String!, $data: UpdateDomainInput!) {\n  updateDomain(domainId: $domainId, data: $data)\n}`;\n\nexport const redeployToProd = gql`\nmutation ($deploymentId: String!) {\n  redeployToProd(deploymentId: $deploymentId)\n}\n`;\n\nexport const deleteProject = gql`\nmutation ($projectId: String!) {\n  deleteProject(projectId: $projectId)\n}\n`;\n\nexport const deleteDomain = gql`\nmutation ($domainId: String!) {\n  deleteDomain(domainId: $domainId)\n}`;\n\nexport const rollbackDeployment = gql`\nmutation ($projectId: String! ,$deploymentId: String!) {\n  rollbackDeployment(projectId: $projectId, deploymentId: $deploymentId)\n}\n`;\n\nexport const deleteDeployment = gql`\nmutation ($deploymentId: String!) {\n  deleteDeployment(deploymentId: $deploymentId)\n}\n`;\n\nexport const addDomain = gql`\nmutation ($projectId: String!, $data: AddDomainInput!) {\n  addDomain(projectId: $projectId, data: $data)\n}\n`;\n\nexport const authenticateGitHub = gql`\nmutation ($code: String!) {\n  authenticateGitHub(code: $code) {\n    token\n  }\n}`;\n\nexport const unauthenticateGitHub = gql`\nmutation {\n  unauthenticateGitHub\n}`;\n","// Note: equivalent to types present in GQL schema\n\nexport enum Role {\n  Owner = 'Owner',\n  Maintainer = 'Maintainer',\n  Reader = 'Reader',\n}\n\nexport enum Permission {\n  View = 'View',\n  Edit = 'Edit',\n}\n\nexport enum Environment {\n  Production = 'Production',\n  Preview = 'Preview',\n  Development = 'Development',\n}\n\nexport enum DeploymentStatus {\n  Building = 'Building',\n  Ready = 'Ready',\n  Error = 'Error',\n  Deleting = 'Deleting'\n}\n\nexport enum DomainStatus {\n  Live = 'Live',\n  Pending = 'Pending',\n}\n\nexport type EnvironmentVariable = {\n  id: string\n  environment: Environment\n  key: string\n  value: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport type Domain = {\n  id: string\n  branch: string\n  name: string\n  status: DomainStatus\n  redirectTo: Domain | null\n  createdAt: string\n  updatedAt: string\n}\n\nexport type User = {\n  id: string\n  name: string | null\n  email: string\n  isVerified: boolean\n  createdAt: string\n  updatedAt: string\n  gitHubToken: string | null\n}\n\nexport type Deployment = {\n  id: string\n  domain: Domain\n  branch: string\n  commitHash: string\n  commitMessage: string\n  url?: string\n  environment: Environment\n  isCurrent: boolean\n  status: DeploymentStatus\n  createdBy: User\n  createdAt: string\n  updatedAt: string\n}\n\nexport type OrganizationMember = {\n  id: string\n  member: User\n  role: Role\n  createdAt: string\n  updatedAt: string\n}\n\nexport type ProjectMember = {\n  id: string\n  member: User\n  permissions: Permission[]\n  isPending: boolean\n  createdAt: string\n  updatedAt: string\n}\n\nexport type OrganizationProject = {\n  id: string\n  owner: User\n  deployments: Deployment[]\n  name: string\n  repository: string\n  prodBranch: string\n  description: string\n  template: string\n  framework: string\n  webhooks: string[]\n  members: ProjectMember[]\n  environmentVariables: EnvironmentVariable[]\n  createdAt: string\n  updatedAt: string\n}\n\nexport type Organization = {\n  id: string\n  name: string\n  slug: string\n  projects: OrganizationProject[]\n  createdAt: string\n  updatedAt: string\n  members: OrganizationMember[]\n}\n\nexport type Project = {\n  id: string\n  owner: User\n  deployments: Deployment[]\n  name: string\n  repository: string\n  prodBranch: string\n  description: string\n  template: string\n  framework: string\n  webhooks: string[]\n  members: ProjectMember[]\n  environmentVariables: EnvironmentVariable[]\n  createdAt: string\n  updatedAt: string\n  organization: Organization\n  icon: string\n  subDomain: string\n}\n\nexport type GetProjectMembersResponse = {\n  projectMembers: ProjectMember[]\n}\n\nexport type AddProjectMemberResponse = {\n  addProjectMember: boolean\n}\n\nexport type RemoveProjectMemberResponse = {\n  removeProjectMember: boolean;\n}\n\nexport type UpdateProjectMemberResponse = {\n  updateProjectMember: boolean;\n}\n\nexport type GetDeploymentsResponse = {\n  deployments: Deployment[]\n}\n\nexport type GetEnvironmentVariablesResponse = {\n  environmentVariables: EnvironmentVariable[]\n}\n\nexport type GetOrganizationsResponse = {\n  organizations: Organization[]\n}\n\nexport type GetUserResponse = {\n  user: User\n}\n\nexport type GetProjectResponse = {\n  project: Project | null\n}\n\nexport type GetProjectsInOrganizationResponse = {\n  projectsInOrganization: Project[]\n}\n\nexport type GetDomainsResponse = {\n  domains: Domain[]\n}\n\nexport type SearchProjectsResponse = {\n  searchProjects: Project[]\n}\n\nexport type AddEnvironmentVariablesResponse = {\n  addEnvironmentVariables: boolean;\n}\n\nexport type AddEnvironmentVariableInput = {\n  environments: string[];\n  key: string;\n  value: string;\n}\n\nexport type UpdateEnvironmentVariableInput = {\n  key: string;\n  value: string;\n}\n\nexport type UpdateProjectMemberInput = {\n  permissions: Permission[];\n}\n\nexport type AddProjectMemberInput = {\n  email: string;\n  permissions: Permission[]\n}\n\nexport type UpdateEnvironmentVariableResponse = {\n  updateEnvironmentVariable: boolean;\n}\n\nexport type RemoveEnvironmentVariableResponse = {\n  removeEnvironmentVariable: boolean;\n}\n\nexport type UpdateDeploymentToProdResponse = {\n  updateDeploymentToProd: boolean;\n}\n\nexport type AddProjectResponse = {\n  addProject: Project\n}\n\nexport type UpdateProjectResponse = {\n  updateProject: boolean;\n}\n\nexport type UpdateDomainResponse = {\n  updateDomain: boolean;\n}\n\nexport type DeleteProjectResponse = {\n  deleteProject: boolean;\n}\n\nexport type DeleteDomainResponse = {\n  deleteDomain: boolean;\n}\n\nexport type AddProjectInput = {\n  name: string;\n  repository: string;\n  prodBranch: string;\n  template?: string;\n}\n\nexport type UpdateProjectInput = {\n  name?: string\n  description?: string\n  prodBranch?: string\n  webhooks?: string[]\n  organizationId?: string\n}\n\nexport type UpdateDomainInput = {\n  name?: string;\n  branch?: string;\n  redirectToId?: string | null;\n}\n\nexport type RedeployToProdResponse = {\n  redeployToProd: boolean\n}\n\nexport type RollbackDeploymentResponse = {\n  rollbackDeployment: boolean\n}\n\nexport type DeleteDeploymentResponse = {\n  deleteDeployment: boolean\n}\n\nexport type AddDomainInput = {\n  name: string\n}\n\nexport type FilterDomainInput = {\n  branch?: string\n  status?: DomainStatus\n}\n\nexport type AddDomainResponse = {\n  addDomain: true\n}\n\nexport type AuthenticateGitHubResponse = {\n  authenticateGitHub: {\n    token: string\n  }\n}\n\nexport type UnauthenticateGitHubResponse = {\n  unauthenticateGitHub: boolean\n}\n"],"mappings":"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","names":["gql","Role","Permission","Environment","DeploymentStatus","DomainStatus"]}